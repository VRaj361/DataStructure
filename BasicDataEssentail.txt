
*****Documentation*****

1) Array 

-> Array is the abstract data type (ADT which hide the internal work only show outer work)
-> Array is Primitive  data type
-> Array store continues memory location and take only one data types at a time
-> Array is the initialise that square brackets and give the argument to size 
-> Array store in stack when it declare in main function
-> if you use Array with doesn't give any argument that return grabage value


2) Structure

-> structure is the user defined data types where we will group together 
-> related data member  named as one name which is similar or disimilar type
-> which ever element is inilialized that sum is required for taken memory of structure
-> There are many ways to inilialized the value it's like a class create a obj like that


3) Pointer 

-> Pointer is use to access memory indirectly
-> One of the point is to access the heap memory which is outside the program
-> Pointer is use various places like in internal structure of OS to access the files to access hardware 
   components
-> Pointer use for accessing heap , accessing resources ,parameter passing
-> Pointer takes 8 byte memory for every data member for 64bit computer
-> so it's independent with data member variable
-> compiler can decide the value of taking the pointer


4) Reference 

-> For the small purpose use we will use reference instead of pointer
-> reference is just like pointer both are for change the values


5) Pointer in Structure

-> If there is Structure and how to point the pointer on it
-> Doing pointer we will modify the value of Structure 
-> use (->) symbol to access the pointer with respect of structure
-> the Structure obj created in heap so use malloc function and cast it after use using pointer


6) Functions

-> Function is like structure but in structure it is grouping the data element and in function 
   there is grouping instructions
-> function is procedures or modules.
-> all line code write in main (monolithic programming) which is bad practice use functions 
-> using function it called procedural programming or modular programming 
-> put the function think in the library and reuse this thinks
-> you can not access the variable of functions in main or vice-versa
-> function contain three method for parameter passing which is pass by value, pass by reference, 
   pass by address 
-> big function which performloop and some computaional task then not use call by reference
-> one change is like we can not change the value directly using functions but here that swap 
   function is part of main method so value will change directly
-> in parameter we will only use address in array so we will pass pointer and in function it is 
   pointer to an array. in function , Array should declare as pointer and nominal way 
-> if you initialise the array dynamically then you will be create a pointer and return it in main
-> We use structure as parameter passing 
-> In arrays we only use pass by address
-> We can change the value in structure using pointer

5) Class

-> Class is similar think like structure
-> the only difference is class contain access specifiers 
-> We use class so we will provided some nice features by class and OOPS 
-> Constructor,accessor,mutetor,feasilitator,destructor etc.


6) Template

-> Template  is Generics when class should not know about what can data can pass by main
   then use Template class to decide the data types 
-> at simply that only replace the data type with template class 